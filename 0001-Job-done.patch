From e70a766f585349369a453b83d53a7990c771e927 Mon Sep 17 00:00:00 2001
From: liban0 <liban.abdulkadir@outlook.com>
Date: Wed, 21 Aug 2024 15:22:28 +0100
Subject: [PATCH] Job done

---
 .gitignore     | 19 +++++++++++++++++++
 client3.py     | 10 +++++++---
 client_test.py | 29 ++++++++++++++++++++++++++++-
 3 files changed, 54 insertions(+), 4 deletions(-)
 create mode 100644 .gitignore

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..2c1d277
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,19 @@
+# Python
+__pycache__/
+*.py[cod]
+*$py.class
+
+# Virtual Environment
+venv/
+env/
+.env
+
+# IDE files
+.vscode/
+.idea/
+
+# OS generated files
+.DS_Store
+Thumbs.db
+
+# Any other specific files or directories you want to ignore
\ No newline at end of file
diff --git a/client3.py b/client3.py
index 3fc09b7..f6fff50 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price+ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+        return None
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +54,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/client_test.py b/client_test.py
index af2bf26..7f08e6f 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint,getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,12 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+            stock, bid_price, ask_price, price = getDataPoint(quote)
+            self.assertEqual(stock, quote['stock'])
+            self.assertEqual(bid_price, quote['top_bid']['price'])
+            self.assertEqual(ask_price, quote['top_ask']['price'])
+            self.assertEqual(price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +21,31 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+            stock, bid_price, ask_price, price = getDataPoint(quote)
+            self.assertEqual(stock, quote['stock'])
+            self.assertEqual(bid_price, quote['top_bid']['price'])
+            self.assertEqual(ask_price, quote['top_ask']['price'])
+            self.assertEqual(price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio_normalCase(self):
+      price_a = 100
+      price_b = 200
+      expected_ratio = 0.5
+      self.assertAlmostEqual(getRatio(price_a, price_b), expected_ratio, delta=0.0001)
 
+  def test_getRatio_priceBIsZero(self):
+      price_a = 100
+      price_b = 0
+      self.assertIsNone(getRatio(price_a, price_b))
+
+  def test_getRatio_priceAIsZero(self):
+      price_a = 0
+      price_b = 100
+      expected_ratio = 0
+      self.assertEqual(getRatio(price_a, price_b), expected_ratio)
 
 
 if __name__ == '__main__':
-- 
2.16.1.windows.4

